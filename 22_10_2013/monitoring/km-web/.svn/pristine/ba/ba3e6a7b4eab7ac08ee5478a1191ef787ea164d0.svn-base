package ru.masterdm.km.web.pages.eventInstances;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.beaneditor.BeanModel;
import org.apache.tapestry5.grid.GridDataSource;
import org.apache.tapestry5.grid.SortConstraint;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.BeanModelSource;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.KmEvent;
import ru.masterdm.km.common.entity.KmEventCalendar;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.dao.ContractorDao;
import ru.masterdm.km.web.base.ClassifierTreeBasePage;

/**
 * таб. панель "классификатор-план-календарь" КМ для клиента.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ContractorClassifier extends ClassifierTreeBasePage {
	@Persist
	@Property
	private int curTab;
	@Persist
	@Property
	private Contractor contractor;
	@Persist
	@Property
	private KmEvent filter;

	@Persist
	private String contractorID;
	@Persist
	private long selectedEventTypeID;
	@Persist
	private Set<Long> arrayPlanForTree;

	@Property
	private KmEventCalendar calendar;
	@Property
	private KmEventInstance eventInstance;

	@Inject
	private ContractorDao contractorDao;
	@Inject
	private BeanModelSource beanModelSource;
	
	void onActivate(String contractorID, int curTab) {
		this.curTab = curTab;
		contractor = dictionaryDao.getContractor(contractorID);
		this.contractorID = contractorID;
		if (filter == null) {
			filter = new KmEvent();
		}
		selectedEventTypeID = -1;
		initArrayPlanForTree();
	}

	private void initArrayPlanForTree() {
		List<KmEventCalendar> planList = contractorDao.getContractorPlan(0, Integer.MAX_VALUE, contractor.getId(), filter);
		arrayPlanForTree = new HashSet<Long>();
		for (KmEventCalendar planEvent : planList) {
			arrayPlanForTree.add(planEvent.getClassifier().getEventType().getId());
		}
	}

	@OnEvent(component = "addEventType")
	void addEventType(long eventTypeID, String eventName) {
		// if (!contractorDao.isExistEventType(contractor.getId(), eventTypeID)) {
		contractorDao.addEventType(contractor.getId(), eventTypeID);
		arrayPlanForTree.add(Long.valueOf(eventTypeID));
		selectedEventTypeID = eventTypeID;
		// }
	}

	@OnEvent(component = "removeEventType")
	void removeEventType(long eventTypeID) {
		contractorDao.removeEventType(contractor.getId(), eventTypeID);
		arrayPlanForTree.remove(Long.valueOf(eventTypeID));
		selectedEventTypeID = -1;
	}

	public boolean isSelectedLeaf() {
		if (valueWrapper != null && valueWrapper.isType() && valueWrapper.getPageName().equals("" + selectedEventTypeID)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isSelectedRowInCalendar() {
		if (calendar != null && calendar.getClassifier().getEventType().getId().longValue() == selectedEventTypeID) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isDisabledLeaf() {
		if (valueWrapper != null && valueWrapper.isType()) {
			Long typeId = Long.valueOf(valueWrapper.getPageName());
			if (arrayPlanForTree.contains(typeId)) {
				return true;
			}
			return false;
		} else {
			return false;
		}
	}

	public GridDataSource getPlan() {
		return new GridDataSource() {
			private int startIndex;
			private List<KmEventCalendar> instances;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				instances = contractorDao.getContractorPlan(startIndex, endIndex - startIndex + 1, contractor.getId(), filter);
			}

			@Override
			public Object getRowValue(int index) {
				return instances.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return KmEventCalendar.class;
			}

			@Override
			public int getAvailableRows() {
				return contractorDao.getContractorPlanCount(contractor.getId(), filter);
			}
		};
	}

	public GridDataSource getEventInstances() {
		return new GridDataSource() {
			private int startIndex;
			private List<KmEventInstance> instances;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				instances = contractorDao.getContractorCalendar(startIndex, endIndex - startIndex + 1, contractor.getId(), filter);
			}

			@Override
			public Object getRowValue(int index) {
				return instances.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return KmEventInstance.class;
			}

			@Override
			public int getAvailableRows() {
				return contractorDao.getContractorCalendarCount(contractor.getId(), filter);
			}
		};
	}

	public BeanModel<KmEventInstance> getEventInstanceModel() {
		BeanModel<KmEventInstance> eventModel = beanModelSource.createDisplayModel(KmEventInstance.class, getMessages());
		for (String prop : eventModel.getPropertyNames()) {
			eventModel.get(prop).sortable(false);
		}
		return eventModel;
	}

	public boolean isRenderAcceptAllButton() {
		// return (filter != null) && (contractorDao.getContractorPlanCount(contractor.getId(), filter) > 0);
		return (arrayPlanForTree != null) && (!arrayPlanForTree.isEmpty());
	}
}

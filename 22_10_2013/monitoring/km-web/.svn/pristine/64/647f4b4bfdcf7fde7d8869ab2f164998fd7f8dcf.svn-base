/**
 * 
 */
package ru.masterdm.km.web.pages.eventInstances;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.tapestry5.PersistenceConstants;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.tree.DefaultTreeModel;
import org.apache.tapestry5.tree.TreeModel;

import ru.masterdm.km.common.entity.KmEvent;
import ru.masterdm.km.common.entity.KmEventCalendar;
import ru.masterdm.km.dao.DealDao;
import ru.masterdm.km.dao.DictionaryDao;
import ru.masterdm.km.util.ClassifierValueWrapper;
import ru.masterdm.km.util.ValueWrapper;
import ru.masterdm.km.web.util.ValueWrapperTreeModelAdapter;

/**
 * таб. панель "классификатор-план-календарь" КМ для сделки.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class DealClassifier {
	private static final ValueWrapper rootNode = new ValueWrapper("Root", null);

	@Persist
	private long dealID;
	@Persist
	private long selectedEventTypeID;
	@Persist
	private Set<Long> arrayPlanForTree;

	@Inject
	private DictionaryDao dictionaryDao;
	@Inject
	private DealDao dealDao;

	@Persist(PersistenceConstants.FLASH)
	@Property
	private ClassifierValueWrapper valueWrapper;
	@Persist
	@Property
	private int curTab;
	@Property
	@Persist
	private String spkpNumber;
	@Persist
	@Property
	private KmEvent filter;

	void pageLoaded() {
		synchronized (rootNode) {
			if (rootNode.children.isEmpty()) {
				dictionaryDao.initClassifierTree(rootNode);
			}
		}
	}

	void onActivate(long id, String spkpNumber, int curTab) {
		this.curTab = curTab;
		dealID = id;
		this.spkpNumber = spkpNumber;
		if (filter == null) {
			filter = new KmEvent();
		}
		selectedEventTypeID = -1;
		initArrayPlanForTree();
	}

	private void initArrayPlanForTree() {
		List<KmEventCalendar> planList = dealDao.getDealPlan(0, Integer.MAX_VALUE, dealID, filter);
		arrayPlanForTree = new HashSet<Long>();
		for (KmEventCalendar planEvent : planList) {
			arrayPlanForTree.add(planEvent.getClassifier().getEventType().getId());
		}
	}
	
	public boolean isSelectedLeaf() {
		if (valueWrapper != null && valueWrapper.isType() && valueWrapper.getPageName().equals("" + selectedEventTypeID)) {
			return true;
		} else {
			return false;
		}
	}
	
	public boolean isDisabledLeaf() {
		if (valueWrapper != null && valueWrapper.isType()) {
			Long typeId = Long.valueOf(valueWrapper.getPageName());
			if (arrayPlanForTree.contains(typeId)) {
				return true;
			}
			return false;
		} else {
			return false;
		}
	}
	
	public TreeModel<ValueWrapper> getTreeModel() {
		ValueEncoder<ValueWrapper> encoder = new ValueEncoder<ValueWrapper>() {
			public String toClient(ValueWrapper value) {
				return value.uuid;
			}

			public ValueWrapper toValue(String clientValue) {
				return rootNode.seek(clientValue);
			}
		};
		return new DefaultTreeModel<ValueWrapper>(encoder, new ValueWrapperTreeModelAdapter(), rootNode.children);
	}

}

package ru.masterdm.km.web.pages.executionEvent;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;

import ru.masterdm.km.common.entity.Deal;
import ru.masterdm.km.web.base.event.ExecuteEventBasePage;
import ru.masterdm.km.web.util.ExecuteEventUtil;
import ru.masterdm.km.web.util.ReportUtil;

/**
 * Карточка контрольного мероприятий для сделки.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ExecuteDealEvent extends ExecuteEventBasePage {
	@Persist
	@Property
	private String spkpNumber;

	void onActivate(long eventID, String spkpNumber) {
		// System.out.println("onActivate =" + eventID + "; spkpNumber=" + spkpNumber);
		init(eventID);
		this.spkpNumber = spkpNumber;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "executeEventButton")
	void executeRequested() {
		action = Action.EXECUTE_EVENT;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "saveEventButton")
	void saveRequested() {
		action = Action.SAVE_EVENT;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "cancelButton")
	Object cancelRequested() {
		action = Action.CANCEL;
		// componentResources.discardPersistentFieldChanges();
		return ByDate.class;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "editFkrButton")
	void editFkrRequested() {
		action = Action.EDIT_FKR;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "cancelEditFkrButton")
	void cancelEditFkrRequested() {
		action = Action.CANCEL_EDIT_FKR;
	}

	void onValidateFromExecuteDealEventForm() {
		System.out.println("onValidateFromExecuteDealEventForm ACTION = " + action);// TODO
		switch (action) {
		case EXECUTE_EVENT:
			validateOnExecuteEvent();
			break;
		case SAVE_EVENT:
			validateOnSaveEvent();
			break;
		default:
			break;
		}
	}

	Object onSuccessFromExecuteDealEventForm() {
		System.out.println("onSuccessFromExecuteDealEventForm ACTION = " + action);// TODO
		switch (action) {
		case EXECUTE_EVENT:
			executeEvent();
			return ByDate.class;
		case SAVE_EVENT:
			saveEvent();
			return ByDate.class;
		default:
			return null;
		}
	}

	void onValidateFromFkrEditForm() {
		System.out.println("onValidateFromFkrEditForm ACTION = " + action);// TODO
		switch (action) {
		case EDIT_FKR:
			validateOnEditFkr();
			break;
		case CANCEL_EDIT_FKR:
			break;
		default:
			return;
		}
	}

	void onSuccessFromFkrEditForm() {
		System.out.println("onSuccessFromFkrEditForm ACTION = " + action);// TODO
		switch (action) {
		case EDIT_FKR:
			editFkr();
			break;
		case CANCEL_EDIT_FKR:
			closeFkrDialog();
			break;
		default:
			return;
		}
	}

	public String getDealInfo() {
		return ExecuteEventUtil.getDealInfo(event.getEvent().getDeal(), getDateViewFormat(), getAmountViewFormat());
	}

	public String getDocInfo() {
		return ExecuteEventUtil.getDocumentInfo(event.getEvent().getDeal(), getDateListFormat(), getAmountViewFormat());
	}

	public String getCombNumber() {
		Deal deal = event.getEvent().getDeal();
		return ReportUtil.generateCombinedNumber(deal.getCrmCode(), deal.getContractNumber());
	}

	public String getPageName() {
		return "executionEvent/ExecuteDealEvent";
	}

	public String getApplySanctionClass() {
		if (event != null && event.isApplySanction()) {
			return "visible";
		}
		return "collapse";
	}

	public String getRevokeSanctionClass() {
		if (event != null && event.isRevokeSanction()) {
			return "visible";
		}
		return "collapse";
	}
}

package ru.masterdm.km.web.pages.eventInstances;

import java.util.Collections;
import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.SelectModel;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.SelectModelFactory;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.KmEvent;
import ru.masterdm.km.common.entity.KmEventType;
import ru.masterdm.km.common.entity.KmEventTypeGroup;
import ru.masterdm.km.common.entity.MonitoredObjectType;
import ru.masterdm.km.dao.DictionaryDao;
import ru.masterdm.km.web.util.BaseEntityValueEncoder;

/**
 * План мероприятий для клиента.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ContractorPlan {
	@Persist
	@Property
	private KmEvent filter;
	@Persist
	@Property
	private Contractor contractor;

	@Inject
	private DictionaryDao dictionaryDao;
	@Inject
	private SelectModelFactory selectModelFactory;
	@Inject
	private AjaxResponseRenderer ajaxResponseRenderer;
	
	@InjectComponent
	private Zone contractorPlanZone;

	private List<MonitoredObjectType> monitoredObjectTypes;
	private List<KmEventTypeGroup> kmEventTypeGroups;
	private List<KmEventType> kmEventTypes;

	void onActivate(String contractorID) {
		contractor = dictionaryDao.getContractor(contractorID);
		if (filter == null) {
			filter = new KmEvent();
		}
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "monitoredObjectTypeSelect")
	void selectMonitoredObjectType(MonitoredObjectType monitoredObjectType) {
		filter.setMonitoredObjectType(monitoredObjectType);
		selectEventTypeGroup(null);
		// ajaxResponseRenderer.addRender(dealCalendarZone);
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "eventTypeGroupSelect")
	void selectEventTypeGroup(KmEventTypeGroup eventTypeGroup) {
		filter.setEventTypeGroup(eventTypeGroup);
		// filter.setEventType(null);
		// ajaxResponseRenderer.addRender(dealCalendarZone);
		selectEventType(null);
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "eventTypeSelect")
	void selectEventType(KmEventType eventType) {
		filter.setEventType(eventType);
		ajaxResponseRenderer.addRender(contractorPlanZone);
	}

	public SelectModel getMonitoredObjectTypeSelectModel() {
		return selectModelFactory.create(getMonitoredObjectTypes(), "name");
	}

	private List<MonitoredObjectType> getMonitoredObjectTypes() {
		if (monitoredObjectTypes == null) {
			monitoredObjectTypes = dictionaryDao.getMonitoredObjectTypes();
		}
		return monitoredObjectTypes;
	}

	public ValueEncoder<MonitoredObjectType> getMonitoredObjectTypeValueEncoder() {
		return new BaseEntityValueEncoder<MonitoredObjectType>(getMonitoredObjectTypes());
	}

	public SelectModel getEventTypeGroupSelectModel() {
		return selectModelFactory.create(getKmEventTypeGroups() != null ? getKmEventTypeGroups() : Collections.emptyList(), "name");
	}

	private List<KmEventTypeGroup> getKmEventTypeGroups() {
		if (kmEventTypeGroups == null && filter.getMonitoredObjectType() != null) {
			kmEventTypeGroups = dictionaryDao.getEventTypeGroups(filter.getMonitoredObjectType().getId());
		}
		return kmEventTypeGroups;
	}

	public ValueEncoder<KmEventTypeGroup> getEventTypeGroupValueEncoder() {
		return new BaseEntityValueEncoder<KmEventTypeGroup>(getKmEventTypeGroups());
	}

	public SelectModel getEventTypeSelectModel() {
		return selectModelFactory.create(getKmEventTypes() != null ? getKmEventTypes() : Collections.emptyList(), "name");
	}

	private List<KmEventType> getKmEventTypes() {
		if (kmEventTypes == null && filter.getEventTypeGroup() != null) {
			kmEventTypes = dictionaryDao.getKmEventTypes(filter.getEventTypeGroup().getId());
		}
		return kmEventTypes;
	}

	public ValueEncoder<KmEventType> getEventTypeValueEncoder() {
		return new BaseEntityValueEncoder<KmEventType>(getKmEventTypes());
	}

	public boolean isRenderEventTypeGroup() {
		return (filter != null) && (filter.getMonitoredObjectType() != null);
	}

	public boolean isRenderEventType() {
		return (filter != null) && (filter.getEventTypeGroup() != null);
	}
}

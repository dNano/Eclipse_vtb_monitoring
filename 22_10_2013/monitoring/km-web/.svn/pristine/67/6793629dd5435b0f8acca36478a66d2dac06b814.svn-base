package ru.masterdm.km.web.util;

import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.commons.io.IOUtils;
import org.apache.tapestry5.upload.services.UploadedFile;

import ru.masterdm.km.common.dictionary.EventRepeatTypeDictionary;
import ru.masterdm.km.common.dictionary.MonthDictionary;
import ru.masterdm.km.common.dictionary.OwnerType;
import ru.masterdm.km.common.entity.AppFile;
import ru.masterdm.km.common.entity.DayOfWeek;
import ru.masterdm.km.common.entity.Deal;
import ru.masterdm.km.common.entity.DocumentType;
import ru.masterdm.km.common.entity.KmEvent;
import ru.masterdm.km.common.entity.KmEventInstance;

/**
 * Util Для режима "Исполнение контрольных мероприятий"
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ExecuteEventUtil {
	private static final int MSEC_IN_DAY = 24 * 60 * 60 * 1000;

	public final static void initConfirmFile(KmEventInstance event, UploadedFile confirmFile) {
		AppFile doc = new AppFile();
		DocumentType docType = event.getDocumentType();
		if (docType != null) {
			doc.setType(docType.getName());
		}
		doc.setId(UUID.randomUUID().toString());
		doc.setName(confirmFile.getFileName());

		doc.setMimeType(confirmFile.getContentType());
		doc.setDateOfAdd(new Date());
		doc.setDocType(docType);
		doc.setDocGroup(event.getDocumentGroup());
		doc.setOwnerType(OwnerType.DEAL.getId());
		if (event.getEvent().getDeal().getPupProcessID() != null) {
			doc.setOwnerID(event.getEvent().getDeal().getPupProcessID().toString());
		}

		// User currentUser = delegate.getCurrentUser();TODO выполнить после добавления инфо о текущем пользователе.
		// doc.setWhoAdd(currentUser);

		try {
			byte[] data = IOUtils.toByteArray(confirmFile.getStream());
			doc.setData(data);
			event.setConfirmFile(doc);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Инфо о сделке.
	 * 
	 * @param deal
	 * @param decimalFormat
	 * @param dateFormat
	 * @return
	 */
	public final static String getDealInfo(Deal deal, DateFormat dateFormat, DecimalFormat decimalFormat) {
		String info = "";
		if (deal != null) {
			if (deal.getValidTo() != null) {
				info += "Соглашение действует до " + dateFormat.format(deal.getValidTo());
				long days = (deal.getValidTo().getTime() - System.currentTimeMillis()) / MSEC_IN_DAY;
				info += ", осталось " + days + " дней. ";
			}
			if (deal.getType() != null && deal.getType().getName() != null) {
				info += deal.getType().getName() + ". ";
			}
			info += decimalFormat.format(deal.getAmount()) + " " + deal.getCurrency().getId() + ".";
		}
		return info;
	}

	/**
	 * Инфо по периодичности мероприятия.
	 * 
	 * @param planEvent
	 * @return
	 */
	public final static String getRepeatTypeInfo(KmEvent planEvent, DateFormat dateFormat) {
		String info = "СРОК: ";
		if (planEvent != null && planEvent.getRepeatType() != null) {
			if (EventRepeatTypeDictionary.ONCE.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTOnce(planEvent, info, dateFormat);
			} else if (EventRepeatTypeDictionary.EVERY_DAY.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTEveryDay(planEvent, info);
			} else if (EventRepeatTypeDictionary.EVERY_WEEK.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTEveryWeek(planEvent, info);
			} else if (EventRepeatTypeDictionary.EVERY_MONTH.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTEveryMonth(planEvent, info);
			} else if (EventRepeatTypeDictionary.EVERY_QUARTER.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTEveryQuarter(planEvent, info);
			} else if (EventRepeatTypeDictionary.EVERY_HALF_YEAR.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTEveryHalfYear(planEvent, info);
			} else if (EventRepeatTypeDictionary.YEAR.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTYear(planEvent, info);
			} else if (EventRepeatTypeDictionary.RANDOM.getId().equals(planEvent.getRepeatType().getId())) {
				info = infoForRTRandom(planEvent, info, dateFormat);
			}
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTRandom(KmEvent planEvent, String info, DateFormat dateFormat) {
		info = "РАСПИСАНИЕ: ";
		if (planEvent.getSchedule() != null && !planEvent.getSchedule().isEmpty()) {
			for (java.util.Date date : planEvent.getSchedule()) {
				info += dateFormat.format(date) + "; ";
			}
		} else if (planEvent.getStartDate() != null) {
			info += dateFormat.format(planEvent.getStartDate());
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTYear(KmEvent planEvent, String info) {
		if (planEvent.getPeriodDetails() != null) {
			if (planEvent.getPeriodDetails() > 0) {
				info += planEvent.getPeriodDetails() + " числа";
			} else {
				info += "Один раз";
			}
		}
		Long periodDate = planEvent.getPeriodDate();
		if (periodDate != null) {
			if (periodDate > 0) {
				for (MonthDictionary month : MonthDictionary.values()) {
					if (month.getId() == periodDate) {
						info += ", " + month.getName();
						break;
					}
				}
			} else {
				info += " каждого месяца в году.";
			}
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTEveryHalfYear(KmEvent planEvent, String info) {
		if (planEvent.getPeriodDetails() != null) {
			if (planEvent.getPeriodDetails() > 0) {
				info += planEvent.getPeriodDetails() + " числа";
			} else {
				info += "Один раз";
			}
		}
		if (planEvent.getPeriodDate() != null) {
			if (planEvent.getPeriodDate() > 0) {
				info += " " + planEvent.getPeriodDate() + "-го месяца в полугодии.";
			} else {
				info += " каждого месяца в полугодии.";
			}
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTEveryQuarter(KmEvent planEvent, String info) {
		if (planEvent.getPeriodDetails() != null) {
			if (planEvent.getPeriodDetails() > 0) {
				info += planEvent.getPeriodDetails() + " числа";
			} else {
				info += "Один раз";
			}
		}
		if (planEvent.getPeriodDate() != null) {
			if (planEvent.getPeriodDate() > 0) {
				info += " " + planEvent.getPeriodDate() + "-го месяца в квартале.";
			} else {
				info += " каждого месяца в квартале.";
			}
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTEveryMonth(KmEvent planEvent, String info) {
		if (planEvent.getPeriodDate() != null) {
			if (planEvent.getPeriodDate() > 0) {
				info += planEvent.getPeriodDate() + " числа";
			} else {
				info += "Один раз";
			}
		}
		if (planEvent.getPeriodDetails() != null) {
			if (planEvent.getPeriodDetails() > 1) {
				info += " в каждые " + planEvent.getPeriodDetails() + " месяца.";
			} else {
				info += " каждого месяца.";
			}
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTEveryWeek(KmEvent planEvent, String info) {
		if (planEvent.getPeriodDetails() != null) {
			info += "Один раз в " + planEvent.getPeriodDetails() + " недели.";
		}
		List<DayOfWeek> daysOfWeek = planEvent.getDaysOfWeek();
		if (daysOfWeek != null && !daysOfWeek.isEmpty()) {
			info += "Дни недели: ";
			for (DayOfWeek day : daysOfWeek) {
				info += day.getName() + " ";
			}
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTEveryDay(KmEvent planEvent, String info) {
		if (planEvent.getPeriodDetails() != null) {
			info += "Один раз в " + planEvent.getPeriodDetails() + " дней.";
		}
		return info;
	}

	/**
	 * @param planEvent
	 * @param info
	 * @return
	 */
	private static String infoForRTOnce(KmEvent planEvent, String info, DateFormat dateFormat) {
		info += "однократно: " + dateFormat.format(planEvent.getStartDate());
		return info;
	}
}

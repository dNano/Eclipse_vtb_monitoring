package ru.masterdm.km.web.pages.eventInstances;

import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.SelectModel;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.SelectModelFactory;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;

import ru.masterdm.km.common.entity.EventResult;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.dao.EventDao;
import ru.masterdm.km.web.util.BaseEntityValueEncoder;
import ru.masterdm.km.web.util.ExecuteEventUtil;

/**
 * Исполнить мероприятие.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ExecuteEvent {
	@Persist
	@Property
	private KmEventInstance event;
	@Persist
	@Property
	private EventResult eventResult;
	@Persist
	@Property
	private boolean showChronology;
	@Persist
	@Property
	private boolean showExecution;
	@Persist
	@Property
	private boolean showResult;
	@Persist
	@Property
	private boolean showRepeatType;

	@Inject
	private EventDao eventDao;

	private List<EventResult> eventResults;

	@Inject
	private SelectModelFactory selectModelFactory;
	@Inject
	private AjaxResponseRenderer ajaxResponseRenderer;

	@InjectComponent
	private Zone chronologyZone;
	@InjectComponent
	private Zone executionZone;
	@InjectComponent
	private Zone resultZone;
	@InjectComponent
	private Zone repeatTypeZone;

	void onActivate(long eventID) {
		event = eventDao.getEventForExecute(eventID);
	}

	@OnEvent(value = EventConstants.SUCCESS, component = "executeEventsForm")
	String executeEvent() {
		return "eventInstances/ByDate";
	}

	void onShowChronology() {
		showChronology = true;
		ajaxResponseRenderer.addRender(chronologyZone);
	}

	void onHideChronology() {
		showChronology = false;
		ajaxResponseRenderer.addRender(chronologyZone);
	}

	void onShowExecution() {
		showExecution = true;
		ajaxResponseRenderer.addRender(executionZone);
	}

	void onHideExecution() {
		showExecution = false;
		ajaxResponseRenderer.addRender(executionZone);
	}

	void onShowResult() {
		showResult = true;
		ajaxResponseRenderer.addRender(resultZone);
	}

	void onHideResult() {
		showResult = false;
		ajaxResponseRenderer.addRender(resultZone);
	}

	void onShowRepeatType() {
		showRepeatType = true;
		ajaxResponseRenderer.addRender(repeatTypeZone);
	}

	void onHideRepeatType() {
		showRepeatType = false;
		ajaxResponseRenderer.addRender(repeatTypeZone);
	}

	public List<EventResult> getEventResults() {
		if (eventResults == null) {
			eventResults = eventDao.getEventResults();
		}
		return eventResults;
	}

	public SelectModel getEventResultSelectModel() {
		return selectModelFactory.create(getEventResults(), "name");
	}

	public ValueEncoder<EventResult> getEventResultValueEncoder() {
		return new BaseEntityValueEncoder<EventResult>(getEventResults());
	}

	public String getDealInfo() {
		return ExecuteEventUtil.getDealInfo(event.getEvent().getDeal());
	}

	public String getRepeatTypeInfo() {
		return ExecuteEventUtil.getRepeatTypeInfo(event.getEvent());
	}
	
	public String getPageName(){
		return "executeEventPage";
	}
}

package ru.masterdm.km.web.pages.executionEvent;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.Link;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.beaneditor.BeanModel;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.BeanModelSource;
import org.apache.tapestry5.services.PageRenderLinkSource;

import ru.masterdm.km.common.entity.Deal;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.common.entity.KmFkr;
import ru.masterdm.km.dao.DealDao;
import ru.masterdm.km.web.base.event.ExecuteEventBasePage;
import ru.masterdm.km.web.util.ExecuteEventUtil;
import ru.masterdm.km.web.util.ReportUtil;

/**
 * Карточка контрольного мероприятий для сделки.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ExecuteDealEvent extends ExecuteEventBasePage {
	@Inject
	private BeanModelSource beanModelSource;

	@Persist
	Link returnPage;

	@Property
	private KmFkr fkr;

	@Inject
	private DealDao dealDao;
	@Inject
	private PageRenderLinkSource pageRenderLinkSource;

	void onActivate(long eventID, String returnPageName) {
		// System.out.println("onActivate =" + eventID + "; spkpNumber=" + spkpNumber);
		init(eventID);
		returnPage = pageRenderLinkSource.createPageRenderLink(returnPageName);
	}

	@OnEvent(value = EventConstants.SELECTED, component = "executeEventButton")
	void executeRequested() {
		action = Action.EXECUTE_EVENT;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "saveEventButton")
	void saveRequested() {
		action = Action.SAVE_EVENT;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "cancelButton")
	Object cancelRequested() {
		action = Action.CANCEL;
		// componentResources.discardPersistentFieldChanges();
		return returnPage;
	}

	void onValidateFromExecuteDealEventForm() {
		System.out.println("onValidateFromExecuteDealEventForm ACTION = " + action);// TODO
		switch (action) {
		case EXECUTE_EVENT:
			validateOnExecuteEvent();
			break;
		case SAVE_EVENT:
			validateOnSaveEvent();
			break;
		default:
			break;
		}
	}

	Object onSuccessFromExecuteDealEventForm() {
		System.out.println("onSuccessFromExecuteDealEventForm ACTION = " + action);// TODO
		switch (action) {
		case EXECUTE_EVENT:
			executeEvent();
			if (event.getResult() != null) {
				createNextEventForDeal(event);
			}
			return returnPage;
		case SAVE_EVENT:
			saveEvent();
			return null;
		default:
			return null;
		}
	}

	private void createNextEventForDeal(KmEventInstance event) {
		long dealID = event.getEvent().getDeal().getId();
		long eventCalendarID = event.getEvent().getId();
		dealDao.acceptNextEventType(dealID, eventCalendarID, event.getPlanExecutionDate());
	}

	public String getDealInfo() {
		return ExecuteEventUtil.getDealInfo(event.getEvent().getDeal(), getDateViewFormat(), getAmountViewFormat());
	}

	public String getDocInfo() {
		return ExecuteEventUtil.getDocumentInfo(event.getEvent().getDeal(), getDateListFormat(), getAmountViewFormat());
	}

	public String getCombNumber() {
		Deal deal = event.getEvent().getDeal();
		return ReportUtil.generateCombinedNumber(deal.getCrmCode(), deal.getContractNumber());
	}

	public String getPageName() {
		return "executionEvent/ExecuteDealEvent";
	}

	public String getApplySanctionClass() {
		if (event != null && event.isApplySanction()) {
			return "visible";
		}
		return "collapse";
	}

	public String getRevokeSanctionClass() {
		if (event != null && event.isRevokeSanction()) {
			return "visible";
		}
		return "collapse";
	}

	public BeanModel<KmFkr> getFkrModel() {
		BeanModel<KmFkr> fkrModel = beanModelSource.createDisplayModel(KmFkr.class, getMessages());
		fkrModel.include("created", "notes", "finished");
		fkrModel.addEmpty("edit").sortable(false);
		fkrModel.addEmpty("fkrType").sortable(false);
		fkrModel.addEmpty("sign").sortable(false);
		fkrModel.addEmpty("status").sortable(false);
		fkrModel.reorder("edit", "created", "fkrType", "sign", "status");
		return fkrModel;
	}
}

package ru.masterdm.km.web.pages.fkr;

import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.Link;
import org.apache.tapestry5.SelectModel;
import org.apache.tapestry5.ValidationTracker;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.Environmental;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.PageRenderLinkSource;
import org.apache.tapestry5.services.SelectModelFactory;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;
import org.apache.tapestry5.upload.services.UploadedFile;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.DealInstance;
import ru.masterdm.km.common.entity.FkrGroup;
import ru.masterdm.km.common.entity.FkrType;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.common.entity.KmFkr;
import ru.masterdm.km.common.entity.KmFkrInstance;
import ru.masterdm.km.common.util.DataTypeUtil;
import ru.masterdm.km.dao.DealDao;
import ru.masterdm.km.dao.DictionaryDao;
import ru.masterdm.km.dao.EventDao;
import ru.masterdm.km.dao.FkrDao;
import ru.masterdm.km.web.base.SimpleBasePage;
import ru.masterdm.km.web.util.BaseEntityValueEncoder;
import ru.masterdm.km.web.util.BuildingEventUtil;
import ru.masterdm.km.web.util.FkrUtil;

/**
 * AddPage for ФКР.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class FkrAdd extends SimpleBasePage {
	@Persist
	@Property
	private KmFkrInstance fkr;
	@Persist
	@Property
	private String fkrInfo;

	@Persist
	Link returnPage;

	@Persist
	@Property
	private FkrGroup fkrGroup;

	@Inject
	private PageRenderLinkSource pageRenderLinkSource;
	@Inject
	private AjaxResponseRenderer ajaxResponseRenderer;
	@Inject
	private SelectModelFactory selectModelFactory;

	@Inject
	private DictionaryDao dictionaryDao;
	@Inject
	private FkrDao fkrDao;
	@Inject
	private DealDao dealDao;
	@Inject
	private EventDao eventDao;

	@InjectComponent
	private Zone fkrTypeZone;

	@Environmental
	private ValidationTracker validationTracker;

	private List<FkrType> fkrTypes;
	private List<FkrGroup> fkrGroups;

	@Property
	private UploadedFile docFile;
	@Property
	private String docFileId;

	private Action action;

	private enum Action {
		ADD_FKR, CANCEL;
	}

	void onActivate(String id, String returnPageName) {
		initFkr();
		if ("buildingEvent/ByDeal".equalsIgnoreCase(returnPageName)) {
			returnPage = pageRenderLinkSource.createPageRenderLinkWithContext(returnPageName);
			DealInstance dealInst = dealDao.getDealInstance(Long.parseLong(id));
			fkr.getFkr().setDeal(dealInst.getDeal());
			fkrInfo = BuildingEventUtil.getDealInfo(dealInst, getDateViewFormat(), getAmountViewFormat());
		} else if ("buildingEvent/ByContractor".equalsIgnoreCase(returnPageName)) {
			returnPage = pageRenderLinkSource.createPageRenderLinkWithContext(returnPageName);
			Contractor client = dictionaryDao.getContractor(id);
			fkr.setClient(client);
			fkrInfo = "Клиент: " + client.getName();
		} else if ("executionEvent/ExecuteDealEvent".equalsIgnoreCase(returnPageName)) {
			Long eventID = Long.parseLong(id);
			KmEventInstance event = eventDao.getEventForExecute(eventID);
			fkr.setEvent(event);
			if (event.getEvent().getDeal().getId() != null) {
				fkr.getFkr().setDeal(event.getEvent().getDeal());
			} else {
				// TODO for client
			}
			String spkpNumber = event.getEvent().getDeal().getSpkpNumber();
			returnPage = pageRenderLinkSource.createPageRenderLinkWithContext(returnPageName, eventID, "executionEvent/ByDate");
			fkrInfo = "мероприятие: " + event.getEvent().getName() + ". ";
			fkrInfo += "Сделка № " + spkpNumber;
		}
	}

	private void initFkr() {
		fkrGroup = null;
		fkr = new KmFkrInstance();
		fkr.setFkr(new KmFkr());
		fkr.getFkr().setCreated(new java.util.Date());
	}

	@OnEvent(value = EventConstants.SELECTED, component = "createNewFkrButton")
	void addFkrRequested() {
		action = Action.ADD_FKR;
	}

	@OnEvent(value = EventConstants.SELECTED, component = "cancelButton")
	void cancelRequested() {
		action = Action.CANCEL;
		// componentResources.discardPersistentFieldChanges();
	}

	void onValidateFromFkrAddForm() {
		switch (action) {
		case ADD_FKR:
			validateOnAddFkr();
			break;
		default:
			break;
		}
	}

	private void validateOnAddFkr() {
		if (DataTypeUtil.isEmpty(fkr.getFkr().getNotes())) {
			validationTracker.recordError(getMessages().get("fkrNote-required-message"));
		}
		if (fkr.getFkr().getType() == null) {
			validationTracker.recordError(getMessages().get("fkrType-required-message"));
		}
		if (fkr.getFkr().getCreated() == null) {
			validationTracker.recordError(getMessages().get("fkrDate-required-message"));
		}
		if (DataTypeUtil.isEmpty(fkr.getFkr().getWho())) {
			validationTracker.recordError(getMessages().get("fkrWho-required-message"));
		}
	}

	Object onSuccessFromFkrAddForm() {
		switch (action) {
		case ADD_FKR:
			addFkr();
			break;
		case CANCEL:
			break;
		default:
			return null;
		}
		// переход к вызывающей странице:
		return returnPage;
	}

	private void addFkr() {
		if (docFile != null) {
			FkrUtil.initDocFile(fkr, docFile);
		}
		fkrDao.addFkrInstance(fkr);
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "fkrGroup")
	void selectFkrGroup(FkrGroup docGroup) {
		ajaxResponseRenderer.addRender(fkrTypeZone);
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "fkrType")
	void selectFkrType(FkrType fkrType) {
		boolean significantFromType = fkrType.isSignificant();
		fkr.getFkr().setSignificant(significantFromType);
		ajaxResponseRenderer.addRender(fkrTypeZone);
	}

	private List<FkrType> getFkrTypes() {
		if (fkrTypes == null && fkrGroup != null) {
			Long groupID = fkrGroup.getId();
			if (fkr.getEvent() != null) {
				Long idEventType = fkr.getEvent().getEvent().getEventType().getId();
				fkrTypes = fkrDao.getFkrTypesForEvent(groupID, idEventType);
			} else {
				fkrTypes = dictionaryDao.getFkrTypes(groupID);
			}
		}
		return fkrTypes;
	}

	public SelectModel getFkrTypeSelectModel() {
		return selectModelFactory.create(getFkrTypes(), "name");
	}

	public ValueEncoder<FkrType> getFkrTypeValueEncoder() {
		return new BaseEntityValueEncoder<FkrType>(getFkrTypes());
	}

	private List<FkrGroup> getFkrGroups() {
		if (fkrGroups == null) {
			if (fkr.getEvent() != null) {
				Long idEventType = fkr.getEvent().getEvent().getEventType().getId();
				fkrGroups = fkrDao.getFkrGroupsForEvent(idEventType);
			} else {
				fkrGroups = dictionaryDao.getFkrGroups();
			}
		}
		return fkrGroups;
	}

	public SelectModel getFkrGroupSelectModel() {
		return selectModelFactory.create(getFkrGroups(), "name");
	}

	public ValueEncoder<FkrGroup> getFkrGroupValueEncoder() {
		return new BaseEntityValueEncoder<FkrGroup>(getFkrGroups());
	}
}

package ru.masterdm.km.web.pages.eventInstances;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.SelectModel;
import org.apache.tapestry5.ValidationTracker;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.Environmental;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.beaneditor.BeanModel;
import org.apache.tapestry5.corelib.components.TextField;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.grid.GridDataSource;
import org.apache.tapestry5.grid.SortConstraint;
import org.apache.tapestry5.ioc.Messages;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.BeanModelSource;
import org.apache.tapestry5.services.SelectModelFactory;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;
import org.apache.tapestry5.services.ajax.JavaScriptCallback;
import org.apache.tapestry5.services.javascript.JavaScriptSupport;
import org.got5.tapestry5.jquery.components.Dialog;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.ContractorGroup;
import ru.masterdm.km.common.entity.Currency;
import ru.masterdm.km.common.entity.DealType;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.common.entity.KmEventInstanceStatus;
import ru.masterdm.km.common.entity.User;
import ru.masterdm.km.common.searchfilter.EventsByDateFilter;
import ru.masterdm.km.dao.DictionaryDao;
import ru.masterdm.km.dao.EventDao;
import ru.masterdm.km.web.util.BaseEntityValueEncoder;

/**
 * 
 * @author Alexey Chalov
 */
public class ByDate {

    @Inject
    private EventDao eventDao;
    @Inject
    private DictionaryDao dictionaryDao;
    @Inject
    private AjaxResponseRenderer ajaxResponseRenderer;
    @Inject
    private SelectModelFactory selectModelFactory;
    @Inject
    private Messages messages;
    @Inject
    private BeanModelSource beanModelSource;

    @Environmental
    private ValidationTracker validationTracker;

    @InjectComponent
    private Zone searchPeriodZone;
    @InjectComponent
    private Zone contractorListZone;
    @InjectComponent
    private Zone contractorZone;
    @InjectComponent
    private Zone executorListZone;
    @InjectComponent
    private Zone executorZone;
    @InjectComponent
    private Zone contractorGroupListZone;
    @InjectComponent
    private Zone contractorGroupZone;

    @InjectComponent
    private TextField amountFromInput;
    @InjectComponent
    private TextField amountToInput;
    @InjectComponent
    private Dialog selectContractorDialog;
    @InjectComponent
    private Dialog selectExecutorDialog;
    @InjectComponent
    private Dialog selectContractorGroupDialog;

    @Persist
    @Property
    private EventsByDateFilter filter;
    @Property
    private KmEventInstanceStatus status;

    @Property(write = false)
    @SuppressWarnings("unused")
    private boolean contractorDialogAppeared;
    @Property(write = false)
    @SuppressWarnings("unused")
    private boolean executorDialogAppeared;
    @Property(write = false)
    @SuppressWarnings("unused")
    private boolean contractorGroupDialogAppeared;

    @Persist
    @Property
    private String contractorNamePattern;
    @Persist
    @Property
    private String executorLastNamePattern;
    @Persist
    @Property
    private String contractorGroupNamePattern;

    @Property
    @SuppressWarnings("unused")
    private Contractor contractor;
    @Property
    @SuppressWarnings("unused")
    private User executor;
    @Property
    @SuppressWarnings("unused")
    private ContractorGroup contractorGroup;
    @Property
    @SuppressWarnings("unused")
    private KmEventInstance eventInstance;

    private Calendar calendar;
    private List<KmEventInstanceStatus> statuses;
    private List<Currency> currencies;
    private List<DealType> dealTypes;

    @OnEvent(value = EventConstants.SUCCESS, component = "searchEventsForm")
    void performSearch() {
        //TODO: complete search, no need in this listener?
    }

    @OnEvent(value = EventConstants.SELECTED, component = "clearFilterButton")
    void clearFilter() {
        filter = emptyFilter();
    }

    @OnEvent(value = EventConstants.VALIDATE, component = "searchEventsForm")
    void suppressValidation() {
        if (validationTracker.inError(amountFromInput)) {
            filter.setAmountFrom(null);
        }
        if (validationTracker.inError(amountToInput)) {
            filter.setAmountTo(null);
        }
        validationTracker.clear();
    }

    @OnEvent(value = EventConstants.SELECTED, component = "contractorSearchButton")
    void searchContractors() {
        ajaxResponseRenderer.addRender(contractorListZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "selectContractorLink")
    void selectContractor(String contractorId) {
        filter.setContractor(dictionaryDao.getContractor(contractorId));
        ajaxResponseRenderer.addCallback(new JavaScriptCallback() {
            
            @Override
            public void run(JavaScriptSupport javaScriptSupport) {
                javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectContractorDialog.getClientId());
            }
        });
        ajaxResponseRenderer.addRender(contractorZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "deleteContractorLink")
    void deleteContractor() {
        filter.setContractor(null);
        ajaxResponseRenderer.addRender(contractorZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "showContractorListDialogLink")
    void prepareContractorSelectDialog() {
        contractorDialogAppeared = true;
        contractorNamePattern = null;
        ajaxResponseRenderer.addRender(contractorListZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "selectExecutorLink")
    void selectExecutor(Long executorId) {
        filter.setExecutor(dictionaryDao.getUser(executorId));
        ajaxResponseRenderer.addCallback(new JavaScriptCallback() {
            
            @Override
            public void run(JavaScriptSupport javaScriptSupport) {
                javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectExecutorDialog.getClientId());
            }
        });
        ajaxResponseRenderer.addRender(executorZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "deleteExecutorLink")
    void deleteExecutor() {
        filter.setExecutor(null);
        ajaxResponseRenderer.addRender(executorZone);
    }

    @OnEvent(value = EventConstants.SELECTED, component = "executorSearchButton")
    void searchExecutors() {
        ajaxResponseRenderer.addRender(executorListZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "showExecutorListDialogLink")
    void prepareExecutorSelectDialog() {
        executorDialogAppeared = true;
        executorLastNamePattern = null;
        ajaxResponseRenderer.addRender(executorListZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "selectContractorGroupLink")
    void selectContractorGroup(String contractorGroupId) {
        filter.setContractorGroup(dictionaryDao.getContractorGroup(contractorGroupId));
        ajaxResponseRenderer.addCallback(new JavaScriptCallback() {
            
            @Override
            public void run(JavaScriptSupport javaScriptSupport) {
                javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectContractorGroupDialog.getClientId());
            }
        });
        ajaxResponseRenderer.addRender(contractorGroupZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "deleteContractorGroupLink")
    void deleteContractorGroup() {
        filter.setContractorGroup(null);
        ajaxResponseRenderer.addRender(contractorGroupZone);
    }

    @OnEvent(value = EventConstants.SELECTED, component = "contractorGroupSearchButton")
    void searchContractorGroups() {
        ajaxResponseRenderer.addRender(contractorGroupListZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "showContractorGroupListDialogLink")
    void prepareContractorGroupSelectDialog() {
        contractorGroupDialogAppeared = true;
        contractorGroupNamePattern = null;
        ajaxResponseRenderer.addRender(contractorGroupListZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "weekAheadPeriodLink")
    void setWeekAheadPeriod() {
        filter.setDateFrom(calendar.getTime());
        calendar.set(Calendar.WEEK_OF_YEAR, calendar.get(Calendar.WEEK_OF_YEAR) + 1);
        filter.setDateTo(calendar.getTime());
        ajaxResponseRenderer.addRender(searchPeriodZone);
    }

    @OnEvent(value = EventConstants.ACTION, component = "monthAheadPeriodLink")
    void setMonthAheadPeriod() {
        filter.setDateFrom(calendar.getTime());
        calendar.set(Calendar.MONTH, calendar.get(Calendar.MONTH) + 1);
        filter.setDateTo(calendar.getTime());
        ajaxResponseRenderer.addRender(searchPeriodZone);
    }

    @OnEvent(value = EventConstants.ACTIVATE)
    void prepare() {
        if (filter == null) {
            filter = emptyFilter();
        }
        calendar = Calendar.getInstance();
        calendar.setTimeInMillis(System.currentTimeMillis());
    }

    public GridDataSource getEventInstances() {
        return new GridDataSource() {
            private int startIndex;
            private List<KmEventInstance> instances;
            
            @Override
            public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
                this.startIndex = startIndex;
                instances = eventDao.getInstances(startIndex, endIndex - startIndex + 1, filter);
            }
            
            @Override
            public Object getRowValue(int index) {
                return instances.get(index - startIndex);
            }
            
            @Override
            public Class<?> getRowType() {
                return KmEventInstance.class;
            }
            
            @Override
            public int getAvailableRows() {
                return eventDao.getInstanceCount(filter);
            }
        };
    }

    public GridDataSource getContractors() {
        return new GridDataSource() {

            private int startIndex;
            private List<Contractor> contractors;

            @Override
            public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
                this.startIndex = startIndex;
                contractors = dictionaryDao.getContractors(startIndex, endIndex - startIndex + 1, contractorNamePattern);
            }
            
            @Override
            public Object getRowValue(int index) {
                return contractors.get(index - startIndex);
            }
            
            @Override
            public Class<?> getRowType() {
                return Contractor.class;
            }
            
            @Override
            public int getAvailableRows() {
                return dictionaryDao.getContractorCount(contractorNamePattern);
            }
        };
    }

    public GridDataSource getExecutors() {
        return new GridDataSource() {

            private int startIndex;
            private List<User> executors;

            @Override
            public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
                this.startIndex = startIndex;
                executors = dictionaryDao.getUsers(startIndex, endIndex - startIndex + 1, executorLastNamePattern);
            }

            @Override
            public Object getRowValue(int index) {
                return executors.get(index - startIndex);
            }

            @Override
            public Class<?> getRowType() {
                return User.class;
            }

            @Override
            public int getAvailableRows() {
                return dictionaryDao.getUserCount(executorLastNamePattern);
            }
        };
    }

    public GridDataSource getContractorGroups() {
        return new GridDataSource() {

            private int startIndex;
            private List<ContractorGroup> contractorGroups;

            @Override
            public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
                this.startIndex = startIndex;
                contractorGroups = dictionaryDao.getContractorGroups(startIndex, endIndex - startIndex + 1, contractorGroupNamePattern);
            }
            
            @Override
            public Object getRowValue(int index) {
                return contractorGroups.get(index - startIndex);
            }
            
            @Override
            public Class<?> getRowType() {
                return ContractorGroup.class;
            }
            
            @Override
            public int getAvailableRows() {
                return dictionaryDao.getContractorGroupCount(contractorGroupNamePattern);
            }
        };
    }

    private EventsByDateFilter emptyFilter() {
        EventsByDateFilter filter= new EventsByDateFilter();
        List<KmEventInstanceStatus> statuses = new ArrayList<KmEventInstanceStatus>();
        statuses.addAll(getStatuses());
        filter.setStatuses(statuses);
        return filter;
    }

    public List<KmEventInstanceStatus> getStatuses() {
        if (statuses == null) {
            statuses = dictionaryDao.getInstanceStatuses();
        }
        return statuses;
    }

    public boolean isStatusSelected() {
        return filter.getStatuses().contains(status);
    }

    public void setStatusSelected(boolean statusSelected) {
        if (statusSelected) {
            if (!filter.getStatuses().contains(status)) {
                filter.getStatuses().add(status);
            }
        } else {
            filter.getStatuses().remove(status);
        }
    }

    public List<Currency> getCurrencies() {
        if (currencies == null) {
            currencies = dictionaryDao.getCurrencies();
        }
        return currencies;
    }

    public SelectModel getCurrencySelectModel() {
        return selectModelFactory.create(getCurrencies(), "id");
    }

    public ValueEncoder<Currency> getCurrencyValueEncoder() {
        return new BaseEntityValueEncoder<Currency>(getCurrencies());
    }

    public List<DealType> getDealTypes() {
        if (dealTypes == null) {
            dealTypes = dictionaryDao.getDealTypes();
        }
        return dealTypes;
    }

    public SelectModel getDealTypeSelectModel() {
        return selectModelFactory.create(getDealTypes(), "name");
    }

    public ValueEncoder<DealType> getDealTypeValueEncoder() {
        return new BaseEntityValueEncoder<DealType>(getDealTypes());
    }

    public BeanModel<Contractor> getContractorModel() {
        BeanModel<Contractor> contractorModel = beanModelSource.createDisplayModel(Contractor.class, messages);
        for (String prop: contractorModel.getPropertyNames()) {
            contractorModel.get(prop).sortable(false);
        }
        return contractorModel;
    }

    public BeanModel<User> getExecutorModel() {
        BeanModel<User> executorModel = beanModelSource.createDisplayModel(User.class, messages);
        for (String prop: executorModel.getPropertyNames()) {
            executorModel.get(prop).sortable(false);
        }
        return executorModel;
    }

    public BeanModel<ContractorGroup> getContractorGroupModel() {
        BeanModel<ContractorGroup> contractorGroupModel = beanModelSource.createDisplayModel(ContractorGroup.class, messages);
        for (String prop: contractorGroupModel.getPropertyNames()) {
            contractorGroupModel.get(prop).sortable(false);
        }
        return contractorGroupModel;
    }

    public BeanModel<KmEventInstance> getEventInstanceModel() {
        BeanModel<KmEventInstance> eventModel = beanModelSource.createDisplayModel(KmEventInstance.class, messages);
        for (String prop: eventModel.getPropertyNames()) {
            eventModel.get(prop).sortable(false);
        }
        return eventModel;
    }
}

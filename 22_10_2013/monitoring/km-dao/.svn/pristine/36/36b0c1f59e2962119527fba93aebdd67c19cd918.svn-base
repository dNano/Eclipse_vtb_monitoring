package ru.masterdm.km.dao;

import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_BY_ID;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_BY_NAME;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_BY_NAME_COUNT;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_GROUPS_BY_NAME;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_GROUPS_BY_NAME_COUNT;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_GROUP_BY_ID;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CONTRACTOR_TYPES;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.CURRENCIES;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.DEAL_TYPES;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.EVENT_INSTANCE_STATUSES;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.EVENT_TYPES;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.EVENT_TYPE_GROUPS;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.MONITORED_OBJECT_TYPES;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.USERS_BY_LAST_NAME;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.USERS_BY_LAST_NAME_PATTERN_COUNT;
import static ru.masterdm.km.dao.DictionaryDaoSqlKey.USER_BY_ID;

import java.util.Collections;
import java.util.List;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.ContractorGroup;
import ru.masterdm.km.common.entity.ContractorType;
import ru.masterdm.km.common.entity.Currency;
import ru.masterdm.km.common.entity.DealType;
import ru.masterdm.km.common.entity.KmEventInstanceStatus;
import ru.masterdm.km.common.entity.KmEventType;
import ru.masterdm.km.common.entity.KmEventTypeGroup;
import ru.masterdm.km.common.entity.MonitoredObjectType;
import ru.masterdm.km.common.entity.User;
import ru.masterdm.km.dao.mapper.ContractorGroupRm;
import ru.masterdm.km.dao.mapper.ContractorRm;
import ru.masterdm.km.dao.mapper.ContractorTypeRm;
import ru.masterdm.km.dao.mapper.CurrencyRm;
import ru.masterdm.km.dao.mapper.DealTypeRm;
import ru.masterdm.km.dao.mapper.KmEventInstanceStatusRm;
import ru.masterdm.km.dao.mapper.KmEventTypeGroupRm;
import ru.masterdm.km.dao.mapper.KmEventTypeRm;
import ru.masterdm.km.dao.mapper.MonitoredObjectTypeRm;
import ru.masterdm.km.dao.mapper.UserRm;
import ru.masterdm.km.util.BaseJdbcDao;

/**
 * 
 * @author Alexey Chalov
 */
public class DictionaryDaoImpl extends BaseJdbcDao<DictionaryDaoSqlKey> implements DictionaryDao {

    @Override
    public List<MonitoredObjectType> getMonitoredObjectTypes() {
        return queryForList(
            sql.getValue(MONITORED_OBJECT_TYPES), new MonitoredObjectTypeRm(), "Error selecting monitored object types."
        );
    }

    @Override
    public List<KmEventTypeGroup> getEventTypeGroups(Long monitoredObjectTypeId) {
        return queryForList(
            sql.getValue(EVENT_TYPE_GROUPS), new KmEventTypeGroupRm(), "Error selecting event type groups.", monitoredObjectTypeId
        );
    }

    @Override
    public List<KmEventType> getKmEventTypes(Long kmEventTypeGroupId) {
        return queryForList(sql.getValue(EVENT_TYPES), new KmEventTypeRm(), "Error selecting event types.", kmEventTypeGroupId);
    }

    @Override
    public List<ContractorType> getContractorTypes() {
        return queryForList(
            sql.getValue(CONTRACTOR_TYPES), new ContractorTypeRm(), "Error selecting contractor types."
        );
    }

    @Override
    public int getUserCount(String lastNamePattern) {
        if (isEmpty(lastNamePattern)) {
            return 0;
        }
        return queryForInt(
            sql.getValue(USERS_BY_LAST_NAME_PATTERN_COUNT), "Error selecting user count.", lastNamePattern + "%"
        );
    }

    @Override
    public List<User> getUsers(int startIndex, int amount, String lastNamePattern) {
        if (isEmpty(lastNamePattern)) {
            return Collections.emptyList();
        }
        return queryForList(
            sql.getValue(USERS_BY_LAST_NAME), new UserRm(),
            "Error selecting users.", lastNamePattern.trim() + "%", startIndex, startIndex + amount
        );
    }

    @Override
    public User getUser(Long id) {
        return queryForObject(sql.getValue(USER_BY_ID), new UserRm(), "Error selecting user.", id);
    }

    @Override
    public List<KmEventInstanceStatus> getInstanceStatuses() {
        return queryForList(
            sql.getValue(EVENT_INSTANCE_STATUSES), new KmEventInstanceStatusRm(), "Error selecting event instance statuses."
        );
    }

    @Override
    public List<Currency> getCurrencies() {
        return queryForList(sql.getValue(CURRENCIES), new CurrencyRm(), "Error selecting currencies.");
    }

    @Override
    public List<DealType> getDealTypes() {
    	return queryForList(sql.getValue(DEAL_TYPES), new DealTypeRm(), "Error selecting deal types.");
    }

    @Override
    public int getContractorCount(String namePattern) {
        if (isEmpty(namePattern)) {
            return 0;
        }
        return queryForInt(
            sql.getValue(CONTRACTOR_BY_NAME_COUNT), "Error selecting contractor count.", "%" + namePattern + "%"
        );
    }

    @Override
    public List<Contractor> getContractors(int startIndex, int amount, String namePattern) {
        if (isEmpty(namePattern)) {
            return Collections.emptyList();
        }
        return queryForList(
            sql.getValue(CONTRACTOR_BY_NAME), new ContractorRm(),
            "Error selecting contractors.", "%" + namePattern + "%", startIndex, startIndex + amount
        );
    }

    @Override
    public Contractor getContractor(String id) {
    	return queryForObject(sql.getValue(CONTRACTOR_BY_ID), new ContractorRm(), "Error selecting contractor.", id);
    }

    @Override
    public int getContractorGroupCount(String namePattern) {
        if (isEmpty(namePattern)) {
            return 0;
        }
        return queryForInt(
            sql.getValue(CONTRACTOR_GROUPS_BY_NAME_COUNT),
            "Error selecting contractor group count.", "%" + namePattern + "%"
        );
    }

    @Override
    public List<ContractorGroup> getContractorGroups(int startIndex, int amount, String namePattern) {
        if (isEmpty(namePattern)) {
            return Collections.emptyList();
        }
        return queryForList(
            sql.getValue(CONTRACTOR_GROUPS_BY_NAME), new ContractorGroupRm(),
            "Error selecting contractor groups.", "%" + namePattern + "%", startIndex, startIndex + amount
        );
    }

    @Override
    public ContractorGroup getContractorGroup(String id) {
    	return queryForObject(
    	    sql.getValue(CONTRACTOR_GROUP_BY_ID), new ContractorGroupRm(), "Error selecting contractor group.", id
    	);
    }

	@Override
	public List<KmEventInstanceStatus> getInstanceStatusesForDeal() {
		// TODO Выполнить после получения структуры БД
		return getInstanceStatuses();
	}
}

package ru.masterdm.km.web.pages;

import org.apache.tapestry5.ComponentResources;
import org.apache.tapestry5.Link;
import org.apache.tapestry5.annotations.Component;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.corelib.components.Form;
import org.apache.tapestry5.corelib.components.TextField;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.slf4j.Logger;

import ru.masterdm.km.common.entity.User;
import ru.masterdm.km.dao.SecurityDao;
import ru.masterdm.km.dao.exception.BusinessException;
import ru.masterdm.km.web.base.SimpleBasePage;
import ru.masterdm.km.web.commons.IIntermediatePage;
import ru.masterdm.km.web.state.Visit;

public class Login extends SimpleBasePage implements IIntermediatePage {

	// The activation context
	@Property
	private String loginId;

	// Screen fields
	@Property
	private String password;

	// Generally useful bits and pieces
	@Persist
	private Link nextPageLink;

	@Component(id = "login")
	private Form form;

	@Component(id = "loginId")
	private TextField loginIdField;

	@Inject
	private Logger logger;

	@Inject
	private ComponentResources componentResources;

	@Inject
	private SecurityDao securityDao;

	// The code

	@Override
	public void setNextPageLink(Link nextPageLink) {
		this.nextPageLink = nextPageLink;
	}

	String onPassivate() {
		return loginId;
	}

	void onActivate(String loginId) {
		this.loginId = loginId;
	}

	void onValidateFromLogin() {

		if (form.getHasErrors()) {
			// We get here only if a server-side validator detected an error.
			return;
		}

		try {
			// Authenticate the user
			User user = securityDao.authenticateUser(loginId, password);

			// Store the user in the Visit
			setVisit(new Visit(user));
			logger.info(user.getLogin() + " has logged in.");
		} catch (BusinessException e) {
			System.out.println("BusinessException" + e);// TODO
			// form.recordError(loginIdField, e.getLocalizedMessage());
			form.recordError(getMessages().format("user_login_unknown", new Object[] { loginId }));
		} catch (Exception e) {
			logger.error("Could not log in.  Stack trace follows...");
			// logger.error(ExceptionUtil.printStackTrace(e));
			form.recordError(getMessages().get("login_problem"));
		}
	}

	Object onSuccess() {
		if (nextPageLink == null) {
			return Index.class;
		} else {
			componentResources.discardPersistentFieldChanges();
			return nextPageLink;
		}
	}

	Object onGoHome() {
		componentResources.discardPersistentFieldChanges();
		return Index.class;
	}

}

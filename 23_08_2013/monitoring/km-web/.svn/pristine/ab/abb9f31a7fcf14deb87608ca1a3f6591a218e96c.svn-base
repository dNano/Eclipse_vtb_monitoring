package ru.masterdm.km.web.pages.eventInstances;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.tapestry5.annotations.Import;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.beaneditor.BeanModel;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.json.JSONObject;
import org.apache.tapestry5.services.BeanModelSource;
import org.got5.tapestry5.jquery.ImportJQueryUI;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.KmEvent;
import ru.masterdm.km.common.entity.KmEventCalendar;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.dao.ContractorDao;
import ru.masterdm.km.dao.EventDao;
import ru.masterdm.km.web.base.ClassifierTreeBasePage;

/**
 * таб. панель "классификатор-план-календарь" КМ для клиента.
 * 
 * @author Shafigullin Ildar
 * 
 */
@Import(stylesheet = { "context:css/jquerydatatables.css" })
@ImportJQueryUI(theme = "context:css/jquery/themes/smoothness/jquery-ui-1.8.23.custom.css")
public class ContractorClassifier extends ClassifierTreeBasePage {
	@Persist
	@Property
	private int curTab;
	@Persist
	@Property
	private Contractor contractor;
	@Persist
	@Property
	private KmEvent filter;

	@Persist
	private String contractorID;
	@Persist
	private long selectedEventTypeID;
	@Persist
	private Set<Long> arrayPlanForTree;
	@Persist
	private Set<Long> arrayCalendar;

	@Property
	private KmEventCalendar calendar;
	@Property
	private KmEventInstance eventInstance;

	@Inject
	private ContractorDao contractorDao;
	@Inject
	private EventDao eventDao;
	@Inject
	private BeanModelSource beanModelSource;

	@Persist
	List<KmEventCalendar> planList;
	@Persist
	List<KmEventInstance> calendarList;

	void onActivate(String contractorID, int curTab) {
		this.curTab = curTab;
		contractor = dictionaryDao.getContractor(contractorID);
		this.contractorID = contractorID;
		if (filter == null) {
			filter = new KmEvent();
		}
		clearSelectedRow();
		init();
	}

	private void init() {
		initPlan();
		initCalendar();
	}

	private void initCalendar() {
		calendarList = contractorDao.getContractorCalendar(0, Integer.MAX_VALUE, contractorID, filter);
		arrayCalendar = new HashSet<Long>();
		for (KmEventInstance event : calendarList) {
			arrayCalendar.add(event.getEvent().getId());
		}
	}

	private void initPlan() {
		planList = contractorDao.getContractorPlan(0, Integer.MAX_VALUE, contractorID, filter);
		arrayPlanForTree = new HashSet<Long>();
		for (KmEventCalendar planEvent : planList) {
			arrayPlanForTree.add(planEvent.getClassifier().getEventType().getId());
		}
	}

	private void clearSelectedRow() {
		selectedEventTypeID = -1;
	}

	private void cleanCalendar() {
		calendarList = null;
	}

	private void clearPlan() {
		planList = null;
	}

	@OnEvent(component = "addEventType")
	void addEventType(long eventTypeID, String eventName) {
		// if (!contractorDao.isExistEventType(contractor.getId(), eventTypeID)) {
		contractorDao.addEventType(contractor.getId(), eventTypeID);
		arrayPlanForTree.add(Long.valueOf(eventTypeID));
		selectedEventTypeID = eventTypeID;
		clearPlan();
		// }
	}

	@OnEvent(component = "removeEventType")
	void removeEventType(long eventTypeID) {
		contractorDao.removeEventType(contractorID, eventTypeID);
		arrayPlanForTree.remove(Long.valueOf(eventTypeID));
		clearSelectedRow();
		clearPlan();
	}

	@OnEvent(component = "acceptEventType")
	void acceptEventType(long eventCalendarID, long eventTypeID) {
		contractorDao.acceptEventType(contractorID, eventCalendarID);
		//clearSelectedRow();
		selectedEventTypeID = eventTypeID;
		cleanCalendar();
	}

	@OnEvent(component = "acceptAll")
	void acceptAllEvent() {
		contractorDao.acceptPlan(contractorID, filter);
		clearSelectedRow();
		cleanCalendar();
	}

	@OnEvent(component = "removeEventInstance")
	void removeEventInstance(long eventInstanceID) {
		eventDao.removeEventInstance(eventInstanceID);
		clearSelectedRow();
		cleanCalendar();
	}

	public boolean isSelectedLeaf() {
		if (valueWrapper != null && valueWrapper.isType() && valueWrapper.getPageName().equals("" + selectedEventTypeID)) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isRowInCalendar() {
		if (calendar != null) {
			Long typeId = Long.valueOf(calendar.getId());
			if (arrayCalendar.contains(typeId)) {
				return true;
			}
			return false;
		} else {
			return false;
		}
	}

	public boolean isSelectedRowInCalendar() {
		if (calendar != null && calendar.getClassifier().getEventType().getId().longValue() == selectedEventTypeID) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isDisabledLeaf() {
		if (valueWrapper != null && valueWrapper.isType()) {
			Long typeId = Long.valueOf(valueWrapper.getPageName());
			if (arrayPlanForTree.contains(typeId)) {
				return true;
			}
			return false;
		} else {
			return false;
		}
	}

	public BeanModel<KmEventInstance> getEventInstanceModel() {
		BeanModel<KmEventInstance> eventModel = beanModelSource.createDisplayModel(KmEventInstance.class, getMessages());
		eventModel.include("planExecutionDate");
		eventModel.addEmpty("eventName").sortable(true);
		eventModel.addEmpty("mailTo");
		eventModel.addEmpty("executor").sortable(true);
		eventModel.addEmpty("remove");
		return eventModel;
	}

	public BeanModel<KmEventCalendar> getPlanModel() {
		BeanModel<KmEventCalendar> model = beanModelSource.createDisplayModel(KmEventCalendar.class, getMessages());
		model.exclude("id", "name", "startDate", "endDate", "periodDate", "periodDetails", "excludeHoliday", "periodWeekend", "docTypeByHand");
		model.addEmpty("accept").sortable(true);
		model.addEmpty("eventTypeName").sortable(true);
		return model;
	}

	public BeanModel<KmEventCalendar> getCalendarModel() {
		BeanModel<KmEventCalendar> model = beanModelSource.createDisplayModel(KmEventCalendar.class, getMessages());
		model.exclude("id", "name", "startDate", "endDate", "periodDate", "periodDetails", "excludeHoliday", "periodWeekend", "docTypeByHand");
		model.addEmpty("edit");
		model.addEmpty("eventTypeName").sortable(true);
		model.addEmpty("remove");
		return model;
	}
	
	public boolean isSelectedRowCalendar() {
		if (eventInstance != null && eventInstance.getEvent().getEventType().getId().longValue() == selectedEventTypeID) {
			return true;
		} else {
			return false;
		}
	}

	public boolean isRenderAcceptAllButton() {
		return (arrayPlanForTree != null) && (arrayCalendar != null) && (arrayPlanForTree.size() > arrayCalendar.size());
	}

	public List<KmEventCalendar> getPlanList() {
		if (planList == null) {
			initPlan();
		}
		return planList;
	}

	public List<KmEventInstance> getCalendarList() {
		if (calendarList == null) {
			initCalendar();
		}
		return calendarList;
	}

	public String getPageName() {
		return "eventInstances/ContractorClassifier";
	}

	public JSONObject getOptions() {
		// The available options are documented at http://www.datatables.net/ref
		// JSONObject options = new JSONObject("bJQueryUI", "true", "sDom", "TC<\"clear\">Rlfrtip");
		JSONObject options = new JSONObject("bJQueryUI", "true");
		// JSONObject oLanguage = new JSONObject();
		// oLanguage.put("sSearch", "найти");
		// options.put("oLanguage", oLanguage);
		return options;
	}

}

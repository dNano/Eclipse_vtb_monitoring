package ru.masterdm.km.web.base.event;

import java.util.Collections;
import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.SelectModel;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.SelectModelFactory;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;
import org.apache.tapestry5.upload.services.UploadedFile;

import ru.masterdm.km.common.entity.DocumentGroup;
import ru.masterdm.km.common.entity.DocumentType;
import ru.masterdm.km.common.entity.EventResult;
import ru.masterdm.km.common.entity.KmConfirmationType;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.dao.DictionaryDao;
import ru.masterdm.km.dao.EventDao;
import ru.masterdm.km.web.base.SimpleBasePage;
import ru.masterdm.km.web.util.BaseEntityValueEncoder;
import ru.masterdm.km.web.util.ExecuteEventUtil;

/**
 * Общая функциональность для карточки контрольных мероприятий.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ExecuteEventBasePage extends SimpleBasePage {
	@Persist
	@Property
	private KmEventInstance event;
	@Persist
	@Property
	private boolean showRepeatType;
	@Persist
	@Property
	private boolean showExecution;
	@Persist
	@Property
	private boolean showResult;

	private List<KmConfirmationType> confirmationTypes;
	private List<DocumentGroup> documentGroups;
	private List<EventResult> eventResults;
	@Persist
	private List<DocumentType> documentTypes;

	@Inject
	private EventDao eventDao;
	@Inject
	protected DictionaryDao dictionaryDao;
	@Inject
	private AjaxResponseRenderer ajaxResponseRenderer;
	@Inject
	private SelectModelFactory selectModelFactory;

	@InjectComponent
	private Zone repeatTypeZone;
	@InjectComponent
	private Zone executionZone;
	@InjectComponent
	private Zone buttonZone;
	@InjectComponent
	private Zone documentZone;
	@InjectComponent
	private Zone resultZone;

	@Property
	private UploadedFile confirmFile;
	@Property
	private String confirmFileId;

	protected Action action;

	protected enum Action {
		EXECUTE_EVENT, CANCEL, SAVE_EVENT;
	}

	protected void init(long eventID) {
		event = eventDao.getEventForExecute(eventID);
		documentTypes = null;
	}

	public String getRepeatTypeInfo() {
		return ExecuteEventUtil.getRepeatTypeInfo(event.getEvent(), getDateViewFormat());
	}

	void onToggleRepeatType() {
		showRepeatType = !showRepeatType;
		ajaxResponseRenderer.addRender(repeatTypeZone);
	}

	void onToggleExecution() {
		showExecution = !showExecution;
		ajaxResponseRenderer.addRender(executionZone).addRender(buttonZone);
	}

	void onToggleResult() {
		showResult = !showResult;
		ajaxResponseRenderer.addRender(resultZone).addRender(buttonZone);
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "eventDocumentGroup")
	void selectEventDocumentGroup(DocumentGroup docGroup) {
		event.setDocumentGroup(docGroup);
		selectEventDocumentType(null);
		documentTypes = null;
		ajaxResponseRenderer.addRender(documentZone);
	}

	@OnEvent(value = EventConstants.VALUE_CHANGED, component = "eventDocumentType")
	void selectEventDocumentType(DocumentType docType) {
		event.setDocumentType(docType);
		ajaxResponseRenderer.addRender(resultZone);
	}

	public boolean isShowExecuteButton() {
		return showResult;
	}

	public boolean isShowSaveButton() {
		return showResult || showExecution;
	}

	public List<KmConfirmationType> getConfirmationTypes() {
		if (confirmationTypes == null) {
			confirmationTypes = dictionaryDao.getKmConfirmationTypes();
		}
		return confirmationTypes;
	}

	public SelectModel getConfirmationTypeSelectModel() {
		return selectModelFactory.create(getConfirmationTypes(), "name");
	}

	public ValueEncoder<KmConfirmationType> getConfirmationTypeValueEncoder() {
		return new BaseEntityValueEncoder<KmConfirmationType>(getConfirmationTypes());
	}

	public List<DocumentGroup> getDocumentGroups() {
		if (documentGroups == null) {
			documentGroups = dictionaryDao.getDocumentGroups();
		}
		return documentGroups;
	}

	public SelectModel getDocumentGroupSelectModel() {
		return selectModelFactory.create(getDocumentGroups(), "name");
	}

	public ValueEncoder<DocumentGroup> getDocumentGroupValueEncoder() {
		return new BaseEntityValueEncoder<DocumentGroup>(getDocumentGroups());
	}

	public List<DocumentType> getDocumentTypes() {
		if (documentTypes == null && event.getDocumentGroup() != null) {
			documentTypes = dictionaryDao.getDocumentTypes(event.getDocumentGroup().getId());
		}
		return documentTypes;
	}

	public SelectModel getDocumentTypeSelectModel() {
		return selectModelFactory.create(getDocumentTypes() != null ? getDocumentTypes() : Collections.emptyList(), "name");
	}

	public ValueEncoder<DocumentType> getDocumentTypeValueEncoder() {
		return new BaseEntityValueEncoder<DocumentType>(getDocumentTypes());
	}

	public List<EventResult> getEventResults() {
		if (eventResults == null) {
			eventResults = eventDao.getEventResults();
		}
		return eventResults;
	}

	public SelectModel getEventResultSelectModel() {
		return selectModelFactory.create(getEventResults(), "name");
	}

	public ValueEncoder<EventResult> getEventResultValueEncoder() {
		return new BaseEntityValueEncoder<EventResult>(getEventResults());
	}
}

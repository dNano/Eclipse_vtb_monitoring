package ru.masterdm.km.web.pages.eventInstances;

import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.SelectModel;
import org.apache.tapestry5.ValueEncoder;
import org.apache.tapestry5.annotations.Environmental;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.beaneditor.BeanModel;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.grid.GridDataSource;
import org.apache.tapestry5.grid.SortConstraint;
import org.apache.tapestry5.internal.services.StringValueEncoder;
import org.apache.tapestry5.ioc.Messages;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.BeanModelSource;
import org.apache.tapestry5.services.SelectModelFactory;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;
import org.apache.tapestry5.services.ajax.JavaScriptCallback;
import org.apache.tapestry5.services.javascript.JavaScriptSupport;
import org.got5.tapestry5.jquery.components.Dialog;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.ContractorGroup;
import ru.masterdm.km.common.entity.Currency;
import ru.masterdm.km.common.entity.DealInstance;
import ru.masterdm.km.common.entity.DealType;
import ru.masterdm.km.common.entity.FkrGroup;
import ru.masterdm.km.common.entity.KmEventInstance;
import ru.masterdm.km.common.entity.KmFkr;
import ru.masterdm.km.common.entity.User;
import ru.masterdm.km.common.searchfilter.EventsByDealFilter;
import ru.masterdm.km.dao.DealDao;
import ru.masterdm.km.dao.DictionaryDao;
import ru.masterdm.km.web.base.SimpleBasePage;
import ru.masterdm.km.web.util.BaseEntityValueEncoder;

/**
 * Список сделок
 * 
 * @author Alexey Chalov
 * @author Shafigullin Ildar
 */
public class ByDeal extends SimpleBasePage {
	@Persist
	private long dealID;

	@Persist
	@Property
	private EventsByDealFilter filter;

	@Inject
	private DictionaryDao dictionaryDao;
	@Inject
	private DealDao dealDao;

	@Persist
	@Property
	private String contractorNamePattern;
	@Persist
	@Property
	private String executorLastNamePattern;
	@Persist
	@Property
	private String contractorGroupNamePattern;

	@Property(write = false)
	private boolean contractorDialogAppeared;
	@Property(write = false)
	private boolean executorDialogAppeared;
	@Property(write = false)
	private boolean contractorGroupDialogAppeared;
	@Property(write = false)
	private boolean dealHistoryDialogAppeared;
	@Property(write = false)
	private boolean dealFkrDialogAppeared;
	@Property(write = false)
	private boolean dealFkrEditDialogAppeared;

	@Property
	private Contractor contractor;
	@Property
	private User executor;
	@Property
	private ContractorGroup contractorGroup;
	@Property
	private DealInstance dealInstance;
	@Property
	private KmEventInstance eventForDeal;
	@Property
	private KmFkr fkrForDeal;
	@Property
	private String spkpNumber;
	@Property
	private KmFkr fkr;

	@Inject
	private BeanModelSource beanModelSource;
	@Inject
	private SelectModelFactory selectModelFactory;
	@Inject
	private Messages messages;
	@Inject
	private AjaxResponseRenderer ajaxResponseRenderer;

	@InjectComponent
	private Dialog selectContractorDialog;
	@InjectComponent
	private Zone contractorListZone;
	@InjectComponent
	private Zone contractorZone;

	@InjectComponent
	private Dialog selectExecutorDialog;
	@InjectComponent
	private Zone executorListZone;
	@InjectComponent
	private Zone executorZone;
	@InjectComponent
	private Zone dealHistoryListZone;
	@InjectComponent
	private Zone dealFkrListZone;
	@InjectComponent
	private Zone dealFkrEditZone;

	@InjectComponent
	private Dialog selectContractorGroupDialog;
	@InjectComponent
	private Zone contractorGroupListZone;
	@InjectComponent
	private Zone contractorGroupZone;

	// @InjectComponent
	// private TextField amountFromInput;
	// @InjectComponent
	// private TextField amountToInput;

	// private Calendar calendar;
	private List<Currency> currencies;
	private List<DealType> dealTypes;
	private List<FkrGroup> fkrGroups;

	@Property
	private final StringValueEncoder stringValueEncoder = new StringValueEncoder();

	@Environmental
	private JavaScriptSupport javaScriptSupport;

	void setupRender() {
		javaScriptSupport.addScript("document.getElementById('%s').focus();", "spkpNumberInput");
	}

	public GridDataSource getDealInstances() {
		return new GridDataSource() {
			private int startIndex;
			private List<DealInstance> instances;

			@Override
			public int getAvailableRows() {
				return dealDao.getInstanceCount(filter);
			}

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				instances = dealDao.getInstances(startIndex, endIndex - startIndex + 1, filter);
			}

			@Override
			public Object getRowValue(int index) {
				return instances.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return DealInstance.class;
			}
		};
	}

	public GridDataSource getEventsForDeal() {
		return new GridDataSource() {
			private int startIndex;
			private List<KmEventInstance> instances;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				instances = dealDao.getDealCalendar(startIndex, endIndex - startIndex + 1, dealID);
			}

			@Override
			public Object getRowValue(int index) {
				return instances.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return KmEventInstance.class;
			}

			@Override
			public int getAvailableRows() {
				return dealDao.getDealCalendarCount(dealID);
			}
		};
	}

	public GridDataSource getFkrsForDeal() {
		return new GridDataSource() {
			private int startIndex;
			private List<KmFkr> instances;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				instances = dealDao.getDealFkr(startIndex, endIndex - startIndex + 1, dealID);
			}

			@Override
			public Object getRowValue(int index) {
				return instances.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return KmFkr.class;
			}

			@Override
			public int getAvailableRows() {
				return dealDao.getDealFkrCount(dealID);
			}
		};
	}

	public BeanModel<KmEventInstance> getEventsForDealModel() {
		BeanModel<KmEventInstance> eventModel = beanModelSource.createDisplayModel(KmEventInstance.class, messages);
		for (String prop : eventModel.getPropertyNames()) {
			eventModel.get(prop).sortable(false);
		}
		return eventModel;
	}

	public BeanModel<KmFkr> getFkrsForDealModel() {
		BeanModel<KmFkr> fkrModel = beanModelSource.createDisplayModel(KmFkr.class, messages);
		for (String prop : fkrModel.getPropertyNames()) {
			fkrModel.get(prop).sortable(false);
		}
		return fkrModel;
	}

	public BeanModel<DealInstance> getDealInstanceModel() {
		BeanModel<DealInstance> eventModel = beanModelSource.createDisplayModel(DealInstance.class, messages);
		for (String prop : eventModel.getPropertyNames()) {
			eventModel.get(prop).sortable(false);
		}
		return eventModel;
	}

	@OnEvent(value = EventConstants.ACTIVATE)
	void prepare() {
		if (filter == null) {
			filter = emptyFilter();
		}
		if (fkr == null) {
			fkr = new KmFkr();
		}
		/*
		 * calendar = Calendar.getInstance(); calendar.setTimeInMillis(System.currentTimeMillis());
		 */
	}

	@OnEvent(value = EventConstants.SUCCESS, component = "searchEventsForm")
	void performSearch() {
		// TODO: complete search, no need in this listener?
	}

	@OnEvent(value = EventConstants.SELECTED, component = "clearFilterButtonForDeal")
	void clearFilter() {
		filter = emptyFilter();
	}

	private EventsByDealFilter emptyFilter() {
		EventsByDealFilter filter = new EventsByDealFilter();
		return filter;
	}

	public SelectModel getCurrencySelectModel() {
		return selectModelFactory.create(getCurrencies(), "id");
	}

	public ValueEncoder<Currency> getCurrencyValueEncoder() {
		return new BaseEntityValueEncoder<Currency>(getCurrencies());
	}

	public List<Currency> getCurrencies() {
		if (currencies == null) {
			currencies = dictionaryDao.getCurrencies();
		}
		return currencies;
	}

	public List<DealType> getDealTypes() {
		if (dealTypes == null) {
			dealTypes = dictionaryDao.getDealTypes();
		}
		return dealTypes;
	}

	public SelectModel getDealTypeSelectModel() {
		return selectModelFactory.create(getDealTypes(), "name");
	}

	public ValueEncoder<DealType> getDealTypeValueEncoder() {
		return new BaseEntityValueEncoder<DealType>(getDealTypes());
	}

	public GridDataSource getContractors() {
		return new GridDataSource() {

			private int startIndex;
			private List<Contractor> contractors;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				contractors = dictionaryDao.getContractors(startIndex, endIndex - startIndex + 1, contractorNamePattern);
			}

			@Override
			public Object getRowValue(int index) {
				return contractors.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return Contractor.class;
			}

			@Override
			public int getAvailableRows() {
				return dictionaryDao.getContractorCount(contractorNamePattern);
			}
		};
	}

	public BeanModel<Contractor> getContractorModel() {
		BeanModel<Contractor> contractorModel = beanModelSource.createDisplayModel(Contractor.class, messages);
		for (String prop : contractorModel.getPropertyNames()) {
			contractorModel.get(prop).sortable(false);
		}
		return contractorModel;
	}

	private List<FkrGroup> getFkrGroups() {
		if (fkrGroups == null) {
			fkrGroups = dictionaryDao.getFkrGroups();
		}
		return fkrGroups;
	}

	public SelectModel getFkrGroupSelectModel() {
		return selectModelFactory.create(getFkrGroups(), "name");
	}

	public ValueEncoder<FkrGroup> getFkrGroupValueEncoder() {
		return new BaseEntityValueEncoder<FkrGroup>(getFkrGroups());
	}

	@OnEvent(value = EventConstants.ACTION, component = "showContractorListDialogLink")
	void prepareContractorSelectDialog() {
		contractorDialogAppeared = true;
		contractorNamePattern = null;
		ajaxResponseRenderer.addRender(contractorListZone);
	}

	@OnEvent(value = EventConstants.SELECTED, component = "contractorSearchButton")
	void searchContractors() {
		ajaxResponseRenderer.addRender(contractorListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "selectContractorLink")
	void selectContractor(String contractorId) {
		filter.setContractor(dictionaryDao.getContractor(contractorId));
		ajaxResponseRenderer.addCallback(new JavaScriptCallback() {

			@Override
			public void run(JavaScriptSupport javaScriptSupport) {
				javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectContractorDialog.getClientId());
			}
		});
		ajaxResponseRenderer.addRender(contractorZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "deleteContractorLink")
	void deleteContractor() {
		filter.setContractor(null);
		ajaxResponseRenderer.addRender(contractorZone);
	}

	public GridDataSource getExecutors() {
		return new GridDataSource() {

			private int startIndex;
			private List<User> executors;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				executors = dictionaryDao.getUsers(startIndex, endIndex - startIndex + 1, executorLastNamePattern);
			}

			@Override
			public Object getRowValue(int index) {
				return executors.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return User.class;
			}

			@Override
			public int getAvailableRows() {
				return dictionaryDao.getUserCount(executorLastNamePattern);
			}
		};
	}

	public BeanModel<User> getExecutorModel() {
		BeanModel<User> executorModel = beanModelSource.createDisplayModel(User.class, messages);
		for (String prop : executorModel.getPropertyNames()) {
			executorModel.get(prop).sortable(false);
		}
		return executorModel;
	}

	@OnEvent(value = EventConstants.ACTION, component = "showExecutorListDialogLink")
	void prepareExecutorSelectDialog() {
		executorDialogAppeared = true;
		executorLastNamePattern = null;
		ajaxResponseRenderer.addRender(executorListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "showDealHistoryListDialogLink")
	void prepareDealHistorySelectDialog(long idDeal) {
		dealHistoryDialogAppeared = true;
		dealID = idDeal;
		ajaxResponseRenderer.addRender(dealHistoryListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "showDealFkrListDialogLink")
	void prepareDealFkrListDialog(long idDeal) {
		dealFkrDialogAppeared = true;
		dealID = idDeal;
		ajaxResponseRenderer.addRender(dealFkrListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "showDealFkrEditDialogLink")
	void prepareDealFkrEditDialog(long idDeal, String spkpNumb) {
		dealFkrEditDialogAppeared = true;
		dealID = idDeal;
		spkpNumber = spkpNumb;// TODO
		ajaxResponseRenderer.addRender(dealFkrEditZone);
	}

	@OnEvent(value = EventConstants.SELECTED, component = "executorSearchButton")
	void searchExecutors() {
		ajaxResponseRenderer.addRender(executorListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "selectExecutorLink")
	void selectExecutor(Long executorId) {
		filter.setExecutor(dictionaryDao.getUser(executorId));
		ajaxResponseRenderer.addCallback(new JavaScriptCallback() {

			@Override
			public void run(JavaScriptSupport javaScriptSupport) {
				javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectExecutorDialog.getClientId());
			}
		});
		ajaxResponseRenderer.addRender(executorZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "deleteExecutorLink")
	void deleteExecutor() {
		filter.setExecutor(null);
		ajaxResponseRenderer.addRender(executorZone);
	}

	public GridDataSource getContractorGroups() {
		return new GridDataSource() {

			private int startIndex;
			private List<ContractorGroup> contractorGroups;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				contractorGroups = dictionaryDao.getContractorGroups(startIndex, endIndex - startIndex + 1, contractorGroupNamePattern);
			}

			@Override
			public Object getRowValue(int index) {
				return contractorGroups.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return ContractorGroup.class;
			}

			@Override
			public int getAvailableRows() {
				return dictionaryDao.getContractorGroupCount(contractorGroupNamePattern);
			}
		};
	}

	public BeanModel<ContractorGroup> getContractorGroupModel() {
		BeanModel<ContractorGroup> contractorGroupModel = beanModelSource.createDisplayModel(ContractorGroup.class, messages);
		for (String prop : contractorGroupModel.getPropertyNames()) {
			contractorGroupModel.get(prop).sortable(false);
		}
		return contractorGroupModel;
	}

	@OnEvent(value = EventConstants.ACTION, component = "selectContractorGroupLink")
	void selectContractorGroup(String contractorGroupId) {
		filter.setContractorGroup(dictionaryDao.getContractorGroup(contractorGroupId));
		ajaxResponseRenderer.addCallback(new JavaScriptCallback() {

			@Override
			public void run(JavaScriptSupport javaScriptSupport) {
				javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectContractorGroupDialog.getClientId());
			}
		});
		ajaxResponseRenderer.addRender(contractorGroupZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "deleteContractorGroupLink")
	void deleteContractorGroup() {
		filter.setContractorGroup(null);
		ajaxResponseRenderer.addRender(contractorGroupZone);
	}

	@OnEvent(value = EventConstants.SELECTED, component = "contractorGroupSearchButton")
	void searchContractorGroups() {
		ajaxResponseRenderer.addRender(contractorGroupListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "showContractorGroupListDialogLink")
	void prepareContractorGroupSelectDialog() {
		contractorGroupDialogAppeared = true;
		contractorGroupNamePattern = null;
		ajaxResponseRenderer.addRender(contractorGroupListZone);
	}

	public String getDealRowClass() {
		return (dealInstance != null && dealInstance.getStatus() != null) ? dealInstance.getStatus().name() : "";
	}
}

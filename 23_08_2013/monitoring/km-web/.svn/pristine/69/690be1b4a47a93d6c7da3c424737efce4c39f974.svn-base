/**
 * 
 */
package ru.masterdm.km.web.pages.eventInstances;

import java.util.List;

import org.apache.tapestry5.EventConstants;
import org.apache.tapestry5.annotations.InjectComponent;
import org.apache.tapestry5.annotations.OnEvent;
import org.apache.tapestry5.annotations.Persist;
import org.apache.tapestry5.annotations.Property;
import org.apache.tapestry5.beaneditor.BeanModel;
import org.apache.tapestry5.corelib.components.Zone;
import org.apache.tapestry5.grid.GridDataSource;
import org.apache.tapestry5.grid.SortConstraint;
import org.apache.tapestry5.ioc.Messages;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.BeanModelSource;
import org.apache.tapestry5.services.ajax.AjaxResponseRenderer;
import org.apache.tapestry5.services.ajax.JavaScriptCallback;
import org.apache.tapestry5.services.javascript.JavaScriptSupport;
import org.got5.tapestry5.jquery.components.Dialog;

import ru.masterdm.km.common.entity.Contractor;
import ru.masterdm.km.common.entity.ContractorGroup;
import ru.masterdm.km.common.entity.ContractorInstance;
import ru.masterdm.km.common.searchfilter.EventsByContractorFilter;
import ru.masterdm.km.dao.ContractorDao;
import ru.masterdm.km.dao.DictionaryDao;

/**
 * Календарь мероприятий по клиентам.
 * 
 * @author Shafigullin Ildar
 * 
 */
public class ByContractor {
	@Inject
	private DictionaryDao dictionaryDao;
	@Inject
	private ContractorDao contractorDao;
	@Inject
	private Messages messages;
	@Inject
	private BeanModelSource beanModelSource;
	@Inject
	private AjaxResponseRenderer ajaxResponseRenderer;

	@InjectComponent
	private Dialog selectContractorDialog;
	@InjectComponent
	private Zone contractorListZone;
	@InjectComponent
	private Zone contractorZone;
	@InjectComponent
	private Zone contractorGroupListZone;
	@InjectComponent
	private Zone contractorGroupZone;
	@InjectComponent
	private Dialog selectContractorGroupDialog;

	@Property(write = false)
	private boolean contractorDialogAppeared;
	@Property(write = false)
	private boolean contractorGroupDialogAppeared;

	@Property
	private Contractor contractor;
	@Property
	private ContractorGroup contractorGroup;
	@Property
	private ContractorInstance contractorInstance;

	@Persist
	@Property
	private EventsByContractorFilter filter;
	@Persist
	@Property
	private String contractorNamePattern;
	@Persist
	@Property
	private String contractorGroupNamePattern;

	@OnEvent(value = EventConstants.SELECTED, component = "contractorSearchButton")
	void searchContractors() {
		ajaxResponseRenderer.addRender(contractorListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "selectContractorLink")
	void selectContractor(String contractorId) {
		filter.setContractor(dictionaryDao.getContractor(contractorId));
		ajaxResponseRenderer.addCallback(new JavaScriptCallback() {

			@Override
			public void run(JavaScriptSupport javaScriptSupport) {
				javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectContractorDialog.getClientId());
			}
		});
		ajaxResponseRenderer.addRender(contractorZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "deleteContractorLink")
	void deleteContractor() {
		filter.setContractor(null);
		ajaxResponseRenderer.addRender(contractorZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "showContractorListDialogLink")
	void prepareContractorSelectDialog() {
		contractorDialogAppeared = true;
		contractorNamePattern = null;
		ajaxResponseRenderer.addRender(contractorListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "selectContractorGroupLink")
	void selectContractorGroup(String contractorGroupId) {
		filter.setContractorGroup(dictionaryDao.getContractorGroup(contractorGroupId));
		ajaxResponseRenderer.addCallback(new JavaScriptCallback() {

			@Override
			public void run(JavaScriptSupport javaScriptSupport) {
				javaScriptSupport.addScript("jQuery('#%1s').dialog('close');", selectContractorGroupDialog.getClientId());
			}
		});
		ajaxResponseRenderer.addRender(contractorGroupZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "deleteContractorGroupLink")
	void deleteContractorGroup() {
		filter.setContractorGroup(null);
		ajaxResponseRenderer.addRender(contractorGroupZone);
	}

	@OnEvent(value = EventConstants.SELECTED, component = "contractorGroupSearchButton")
	void searchContractorGroups() {
		ajaxResponseRenderer.addRender(contractorGroupListZone);
	}

	@OnEvent(value = EventConstants.ACTION, component = "showContractorGroupListDialogLink")
	void prepareContractorGroupSelectDialog() {
		contractorGroupDialogAppeared = true;
		contractorGroupNamePattern = null;
		ajaxResponseRenderer.addRender(contractorGroupListZone);
	}
	
	public GridDataSource getContractorInstances() {
		return new GridDataSource() {
			private int startIndex;
			private List<ContractorInstance> instances;

			@Override
			public int getAvailableRows() {
				return contractorDao.getInstanceCount(filter);
			}

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				instances = contractorDao.getInstances(startIndex, endIndex - startIndex + 1, filter);
			}

			@Override
			public Object getRowValue(int index) {
				return instances.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return ContractorInstance.class;
			}
		};
	}	

	public BeanModel<ContractorGroup> getContractorGroupModel() {
		BeanModel<ContractorGroup> contractorGroupModel = beanModelSource.createDisplayModel(ContractorGroup.class, messages);
		for (String prop : contractorGroupModel.getPropertyNames()) {
			contractorGroupModel.get(prop).sortable(false);
		}
		return contractorGroupModel;
	}

	public GridDataSource getContractorGroups() {
		return new GridDataSource() {

			private int startIndex;
			private List<ContractorGroup> contractorGroups;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				contractorGroups = dictionaryDao.getContractorGroups(startIndex, endIndex - startIndex + 1, contractorGroupNamePattern);
			}

			@Override
			public Object getRowValue(int index) {
				return contractorGroups.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return ContractorGroup.class;
			}

			@Override
			public int getAvailableRows() {
				return dictionaryDao.getContractorGroupCount(contractorGroupNamePattern);
			}
		};
	}

	public BeanModel<Contractor> getContractorModel() {
		BeanModel<Contractor> contractorModel = beanModelSource.createDisplayModel(Contractor.class, messages);
		for (String prop : contractorModel.getPropertyNames()) {
			contractorModel.get(prop).sortable(false);
		}
		return contractorModel;
	}

	public GridDataSource getContractors() {
		return new GridDataSource() {

			private int startIndex;
			private List<Contractor> contractors;

			@Override
			public void prepare(int startIndex, int endIndex, List<SortConstraint> sortConstraints) {
				this.startIndex = startIndex;
				contractors = dictionaryDao.getContractors(startIndex, endIndex - startIndex + 1, contractorNamePattern);
			}

			@Override
			public Object getRowValue(int index) {
				return contractors.get(index - startIndex);
			}

			@Override
			public Class<?> getRowType() {
				return Contractor.class;
			}

			@Override
			public int getAvailableRows() {
				return dictionaryDao.getContractorCount(contractorNamePattern);
			}
		};
	}

	@OnEvent(value = EventConstants.ACTIVATE)
	void prepare() {
		if (filter == null) {
			filter = emptyFilter();
		}
	}

	@OnEvent(value = EventConstants.SELECTED, component = "clearFilterButton")
	void clearFilter() {
		filter = emptyFilter();
	}

	private EventsByContractorFilter emptyFilter() {
		return new EventsByContractorFilter();
	}
}
